datasource db {
  provider = "postgresql"
  url      = env("DB_URL_POSTGRES")
}

generator client {
  provider = "prisma-client-js"
}

model Roles {
  id           Int     @id @default(autoincrement())
  name         String
  access_level Int     @default(0)
  is_default   Boolean @default(false)
  users        UserRoles[]

  @@map("roles")
}

model Group {
  id     Int    @id @default(autoincrement())
  number String
  User   User[]

  @@map("groups")
}

model Contract {
  id       Int        @id @default(autoincrement())
  number   String
  Practice Practice[]

  @@map("contracts")
}

model Form {
  id   Int    @id @default(autoincrement())
  name String
  Base Base[]

  @@map("legal_forms")
}

model Direction {
  id   Int    @id @default(autoincrement())
  name String
  Base Base[]

  @@map("directions")
}

model Person {
  id             Int        @id @default(autoincrement())
  firstName      String
  lastName       String
  secondName     String
  number         String
  email          String
  position       String
  communication  String
  type           PersonType
  responsible    Base[]     @relation("responsible")
  representative Base[]     @relation("representative")

  @@map("persons")
}

model Base {
  id               Int        @id @default(autoincrement())
  name             String
  form             Int
  formId           Form       @relation(fields: [form], references: [id])
  direction        Int
  directionId      Direction  @relation(fields: [direction], references: [id])
  representative   Int
  representativeId Person     @relation("representative", fields: [representative], references: [id])
  responsible      Int
  responsibleId    Person     @relation("responsible", fields: [responsible], references: [id])
  comment          String
  Practice         Practice[]

  @@map("bases")
}

model Practice {
  id         Int          @id @default(autoincrement())
  student    Int          @unique
  studentId  User         @relation(fields: [student], references: [id])
  contract   Int
  contractId Contract     @relation(fields: [contract], references: [id])
  base       Int
  baseId     Base         @relation(fields: [base], references: [id])
  period     Int
  periodId   Date         @relation(fields: [period], references: [id])
  comment    String
  type       PracticeType @default(production)

  @@map("practices")
}

model Date {
  id         Int        @id @default(autoincrement())
  date_start DateTime
  date_end   DateTime
  Practice   Practice[]

  @@map("dates")
}

model User {
  id         Int        @id @default(autoincrement())
  firstName  String
  lastName   String
  secondName String
  username   String     @unique
  login      String     @unique
  password   String
  token      String
  roles      UserRoles[]
  group_id   Int        @default(-1)
  group      Group      @relation(fields: [group_id], references: [id])
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  Practice   Practice[]

  @@map("users")
}

model UserRoles {
  user   User  @relation(fields: [userId], references: [id])
  userId Int
  role   Roles @relation(fields: [roleId], references: [id])
  roleId Int

  @@id([userId, roleId])
}

enum PersonType {
  responsible
  representative
}

enum PracticeType {
  production
  educational
}
